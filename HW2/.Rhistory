craps_game <- function(num_simulations, bet_size) {
results <- vector(length = num_simulations)
for (i in 1:num_simulations) {
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
if (dice_total == 7 | dice_total == 11) {
bet_count <<- bet_size + bet_count
results[i] <- TRUE
} else if (dice_total == 2 | dice_total == 3 | dice_total == 12) {
bet_count <<- bet_count - bet_size
results[i] <- FALSE
} else {
record <- dice_total
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
while (record != dice_total) {
if (dice_total == 7) {
bet_count <<- bet_count - bet_size
results[i] <- FALSE
break
} else {
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
}
}
if (record == dice_total) {
bet_count <<- bet_size + bet_count
results[i] <- TRUE
}
}
}
for (i in results) {
if(i==TRUE){
win <<- win + 1
}else{
lose <<- lose + 1
}
}
expected_value <<-  (win/num_simulations * bet_size) + (lose/num_simulations * -bet_size )
return(expected_value)
}
expected_value <-0
bet_count <- 0
win<-0
lose<-0
craps_game(3, 1)
#win
#win
#lose
#win
#lose
#bet_count
craps_game <- function(num_simulations, bet_size) {
results <- vector(length = num_simulations)
for (i in 1:num_simulations) {
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
if (dice_total == 7 | dice_total == 11) {
bet_count <<- bet_size + bet_count
results[i] <- TRUE
} else if (dice_total == 2 | dice_total == 3 | dice_total == 12) {
bet_count <<- bet_count - bet_size
results[i] <- FALSE
} else {
record <- dice_total
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
while (record != dice_total) {
if (dice_total == 7) {
bet_count <<- bet_count - bet_size
results[i] <- FALSE
break
} else {
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
}
}
if (record == dice_total) {
bet_count <<- bet_size + bet_count
results[i] <- TRUE
}
}
}
for (i in results) {
if(i==TRUE){
win <<- win + 1
}else{
lose <<- lose + 1
}
}
expected_value <<-  (win/num_simulations * bet_size) + (lose/num_simulations * -bet_size )
return(expected_value)
}
expected_value <-0
bet_count <- 0
win<-0
lose<-0
craps_game(3, 1)
craps_game <- function(num_simulations, bet_size) {
results <- vector(length = num_simulations)
for (i in 1:num_simulations) {
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
if (dice_total == 7 | dice_total == 11) {
bet_count <<- bet_size + bet_count
results[i] <- TRUE
} else if (dice_total == 2 | dice_total == 3 | dice_total == 12) {
bet_count <<- bet_count - bet_size
results[i] <- FALSE
} else {
record <- dice_total
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
while (record != dice_total) {
if (dice_total == 7) {
bet_count <<- bet_count - bet_size
results[i] <- FALSE
break
} else {
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
}
}
if (record == dice_total) {
bet_count <<- bet_size + bet_count
results[i] <- TRUE
}
}
}
for (i in results) {
if(i==TRUE){
win <<- win + 1
}else{
lose <<- lose + 1
}
}
expected_value <<-  (win/num_simulations * bet_size) + (lose/num_simulations * -bet_size )
return(expected_value)
}
expected_value <-0
bet_count <- 0
win<-0
lose<-0
craps_game(3, 1)
craps_game <- function(num_simulations, bet_size) {
results <- vector(length = num_simulations)
for (i in 1:num_simulations) {
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
if (dice_total == 7 | dice_total == 11) {
bet_count <<- bet_size + bet_count
results[i] <- TRUE
} else if (dice_total == 2 | dice_total == 3 | dice_total == 12) {
bet_count <<- bet_count - bet_size
results[i] <- FALSE
} else {
record <- dice_total
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
while (record != dice_total) {
if (dice_total == 7) {
bet_count <<- bet_count - bet_size
results[i] <- FALSE
break
} else {
dice_num <- sample(1:6, 2)
dice_total <- dice_num[1] + dice_num[2]
}
}
if (record == dice_total) {
bet_count <<- bet_size + bet_count
results[i] <- TRUE
}
}
}
for (i in results) {
if(i==TRUE){
win <<- win + 1
}else{
lose <<- lose + 1
}
}
expected_value <<-  (win/num_simulations * bet_size) + (lose/num_simulations * -bet_size )
return(expected_value)
}
expected_value <-0
bet_count <- 0
win<-0
lose<-0
craps_game(3, 1)
library(mvtnorm)
library(factoextra)
0 <= x & x <= 0.5 # compare eaah value
#4/26
set.seed(99) #put random to save in a certain place
x <- runif(8, 0, 1) #random uniform
x
0 <= x & x <= 0.5 # compare eaah value
0 <= x && x <= 0.5
## [1] FALSE
x[0 <= x & x <= 0.5] <- 99
x
0.5 >= x | x >= 0.6 #
0.5 >= x || x >= 0.6
for(i in c(1:6)){
if(i == 4) break  # 當i等於4的時候，跳出迴圈
print(i)
}
repeat{ #repeat和while很像，差別在於條件可以寫在任何地方，並且使用break跳出迴圈
if(i > 100) break # 當i比100大時，用break跳出迴圈
# 迴圈內重複進行的動作
result <- result + i
i <- i + 1
}
result <- 0
repeat{ #repeat和while很像，差別在於條件可以寫在任何地方，並且使用break跳出迴圈
if(i > 100) break # 當i比100大時，用break跳出迴圈
# 迴圈內重複進行的動作
result <- result + i
i <- i + 1
}
result
for(i in c(1:6)){
if(i == 3) next  #當i等於3的時候，省略此次迴圈(skip)的動作，從下一個i=4開始
print(i)
}
x <- matrix(1:24, nrow=4)
x
apply(x, 1, sum) #row sum
apply(x, 2, sum) #column sum
x
myfun <- function(x){
return(sqrt(x)*10)
}
apply(x, 2, myfun)
#lapply return list
x <- list(a = 1, b = 1:3, c =10:100)
lapply(x,length)
x
#tapply divide group
(group <- as.factor(sample(c("a","b","c"), 30, replace = T)))
(score <- sample(0:100,30, replace = T))
(blood <- as.factor(sample(c("A","B","O","AB"), 30, replace = T)))
#對每個group的score取mean
tapply(score, group, mean)
#對每個group&blood的組合取mean
tapply(score, list(group,blood), mean)
df
A <- c()
for( i in 1:4){
A[i] <- mean(df[,i])#對1-4的row取平均
}
A
apply(df,2,mean)
df <-data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
df
A <- c()
for( i in 1:4){
A[i] <- mean(df[,i])#對1-4的row取平均
}
A
apply(df,2,mean)
#ex4
age <- sample(1:100,20)
age_grp <- function(x){
group.id <- ifelse(x <= 20, "A",
ifelse(x>=21 & x<=40, "B",
ifelse(x>=41 & x<=60, "C","D")))
data.frame(x , group.id, row.names = NULL) #use age replace x is ok
}
age_grp(age)
#ex5
fasctorial.for <- function(n){
f<-1
for(i in 1:n){
f <- f*i
}
f
}
fasctorial.for(5)
#ex6
#投幾次才得到result =3也就是正面等於3
result <- c()
coin <- c(1,0) #head, tail
i <- 1
while(sum(result)<3){
result[i] <- sample(coin, size = 1)
i <- i+1
}
result
length(result)
#ex7
data(iris)
n <- nrow(iris)
D <- matrix(0,n,n)
data <- iris[,-5]
for(i in 1:n){
for(j in 1:n){
D[i,j] <- (sum((data[i,]-data[j,])^2))^0.5
}
}
D
dist(data,diag=T,upper=T)
one = function(){
desk <- c(rep("h",13),rep("d",13),rep("c",13),rep("s",13))
hand <- sample(x = desk, size = 5)
names(hand) <- paste("h",1:length(hand),sep = "")
diamonds <-sum(hand == "d")
hearts <- sum(hand == "h")
success <- diamonds == hearts
data.frame(t(hand),diamonds,hearts,success)
}
one()
many <- function(NNN){
replicate(NNN, one()$success)
}
many(10)
replicate(10, one()$success)
rnorm(10)
pnorm(1.96)
qnorm(0.05)
#ex7
data(iris)
View(iris)
n <- nrow(iris)
n
D <- matrix(0,n,n)
D
data <- iris[,-5]
data
one = function(){
desk <- c(rep("h",13),rep("d",13),rep("c",13),rep("s",13))
hand <- sample(x = desk, size = 5)
names(hand) <- paste("h",1:length(hand),sep = "")
diamonds <-sum(hand == "d")
hearts <- sum(hand == "h")
success <- diamonds == hearts
data.frame(t(hand),diamonds,hearts,success)
}
one()
one = function(){
desk <- c(rep("h",13),rep("d",13),rep("c",13),rep("s",13))
hand <- sample(x = desk, size = 5)
names(hand) <- paste("h",1:length(hand),sep = "")
diamonds <-sum(hand == "d")
hearts <- sum(hand == "h")
success <- diamonds == hearts
data.frame(t(hand),diamonds,hearts,success)
}
one()
one = function(){
desk <- c(rep("h",13),rep("d",13),rep("c",13),rep("s",13))
hand <- sample(x = desk, size = 5)
names(hand) <- paste("h",1:length(hand),sep = "")
diamonds <-sum(hand == "d")
hearts <- sum(hand == "h")
success <- diamonds == hearts
data.frame(t(hand),diamonds,hearts,success)
}
one()
